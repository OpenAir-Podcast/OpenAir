import 'dart:convert';
import 'dart:typed_data';

import 'package:convert/convert.dart';
import 'package:crypto/crypto.dart';
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:http/http.dart' as http;

final podcastIndexProvider = Provider(
  (ref) => PodcastIndexProvider(),
);

class PodcastIndexProvider {
  final String? podcastIndexApi = dotenv.env['PODCAST_INDEX_API_KEY'];
  final String? podcastIndexSecret = dotenv.env['PODCAST_INDEX_API_SECRET'];
  final String? podcastIndexUserAgent = dotenv.env['PODCAST_USER_AGENT'];

  late int unixTime;
  late String newUnixTime;

  late Uint8List firstChunk;
  late Uint8List secondChunk;
  late Uint8List thirdChunk;

  late AccumulatorSink<Digest> output;
  late ByteConversionSink input;

  late Digest digest;
  late Map<String, String> headers;

  PodcastIndexProvider() {
    unixTime = (DateTime.now().millisecondsSinceEpoch / 1000).round();
    newUnixTime = unixTime.toString();

    firstChunk = utf8.encode(podcastIndexApi!);
    secondChunk = utf8.encode(podcastIndexSecret!);
    thirdChunk = utf8.encode(newUnixTime);

    output = AccumulatorSink<Digest>();
    input = sha1.startChunkedConversion(output);
    input.add(firstChunk);
    input.add(secondChunk);
    input.add(thirdChunk);
    input.close();

    digest = output.events.single;

    headers = {
      "X-Auth-Date": newUnixTime,
      "X-Auth-Key": podcastIndexApi!,
      "Authorization": digest.toString(),
      "User-Agent": podcastIndexUserAgent!,
    };
  }

  /// This method is used to get the list of podcasts from the API.
  ///
  /// The API uses a combination of the API key, secret key, and a Unix
  /// timestamp to generate a SHA1 hash. The hash is then used to authenticate
  /// the request.
  ///
  /// The API key is hard-coded in the app, and the secret key is stored in the
  /// [ApiKeys] class. The Unix timestamp is generated by the app when the
  /// request is made.
  ///
  /// The request is made to the API, and the response is parsed as JSON. The
  /// response is then returned as a [Map<String, dynamic>].

  Future<Map<String, dynamic>> getEpisodesByFeedUrl(
      String podcastFeedUrl) async {
    String cat = podcastFeedUrl.replaceAll(' ', '%20');

    String url =
        'https://api.podcastindex.org/api/1.0/episodes/byfeedurl?url=$cat&pretty';

    debugPrint('Feed URL: $url');

    final response = await http.get(Uri.parse(url), headers: headers);

    if (response.statusCode == 200) {
      final String xmlString = response.body;
      return json.decode(xmlString);
    } else {
      throw Exception('Failed to get data from the API');
    }
  }

  Future<int> getPodcastEpisodeCountByPodcastId(int podcastId) async {
    String url =
        'https://api.podcastindex.org/api/1.0/podcasts/byfeedid?id=$podcastId&pretty';

    final response = await http.get(Uri.parse(url), headers: headers);

    if (response.statusCode == 200) {
      final String xmlString = response.body;
      Map<String, dynamic> data = json.decode(xmlString);
      return data['feed']['episodeCount'];
    } else {
      throw Exception('Failed to get data from the API');
    }
  }

  Future<Map<String, dynamic>> getPodcastsByCategory(String category) async {
    String cat = category.replaceAll(' ', '%20');

    String url =
        'https://api.podcastindex.org/api/1.0/recent/feeds?cat=$cat&lang=en&pretty';

    debugPrint('Category URL: $url');

    final response = await http.get(Uri.parse(url), headers: headers);

    if (response.statusCode == 200) {
      final String xmlString = response.body;
      return json.decode(xmlString);
    } else {
      throw Exception('Failed to get data from the API');
    }
  }

  Future<Map<String, dynamic>> getTrendingPodcasts() async {
    String url =
        'https://api.podcastindex.org/api/1.0/podcasts/trending?max=150&lang=en&pretty';

    final response = await http.get(Uri.parse(url), headers: headers);

    if (response.statusCode == 200) {
      final String xmlString = response.body;
      return json.decode(xmlString);
    } else {
      throw Exception('Failed to get data from the API');
    }
  }

  Future<Map<String, dynamic>> getTopPodcasts() async {
    final response = await http.get(
        Uri.parse(
          'https://api.podcastindex.org/api/1.0/recent/feeds?lang=en&pretty',
        ),
        headers: headers);

    if (response.statusCode == 200) {
      final String xmlString = response.body;
      return json.decode(xmlString);
    } else {
      throw Exception('Failed to get data from the API');
    }
  }

  Future<Map<String, dynamic>> getEducationPodcasts() async {
    final response = await http.get(
        Uri.parse(
          'https://api.podcastindex.org/api/1.0/recent/feeds?max=3&cat=education&lang=en&pretty',
        ),
        headers: headers);

    if (response.statusCode == 200) {
      final String xmlString = response.body;
      return json.decode(xmlString);
    } else {
      throw Exception('Failed to get data from the API');
    }
  }

  Future<Map<String, dynamic>> getHealthPodcasts() async {
    final response = await http.get(
        Uri.parse(
          'https://api.podcastindex.org/api/1.0/recent/feeds?max=3&cat=health&lang=en&pretty',
        ),
        headers: headers);

    if (response.statusCode == 200) {
      final String xmlString = response.body;
      return json.decode(xmlString);
    } else {
      throw Exception('Failed to get data from the API');
    }
  }

  Future<Map<String, dynamic>> getTechnologyPodcasts() async {
    final response = await http.get(
        Uri.parse(
          'https://api.podcastindex.org/api/1.0/recent/feeds?max=3&cat=technology&lang=en&pretty',
        ),
        headers: headers);

    if (response.statusCode == 200) {
      final String xmlString = response.body;
      return json.decode(xmlString);
    } else {
      throw Exception('Failed to get data from the API');
    }
  }

  Future<Map<String, dynamic>> getSportsPodcasts() async {
    final response = await http.get(
        Uri.parse(
          'https://api.podcastindex.org/api/1.0/recent/feeds?max=3&cat=sports&lang=en&pretty',
        ),
        headers: headers);

    if (response.statusCode == 200) {
      final String xmlString = response.body;
      return json.decode(xmlString);
    } else {
      throw Exception('Failed to get data from the API');
    }
  }
}
